[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this section, I will install and load tidyverse and sf packages\n\npacman::p_load(tidyverse, sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-geospatial-data-in-shapefile-format",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-geospatial-data-in-shapefile-format",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "2.1 Importing geospatial data in shapefile format",
    "text": "2.1 Importing geospatial data in shapefile format\nUtilising sf package to read the Masterplan subzone boundary (2014) data in shapefile format.\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\annatrw\\IS415\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nImporting polyline feature data in shapefile format\n\ncyclingpath = st_read(dsn = \"data/geospatial\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\annatrw\\IS415\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-gis-data-in-kml-format",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-gis-data-in-kml-format",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "2.2 Importing GIS data in kml format",
    "text": "2.2 Importing GIS data in kml format\nThis section uses sf package to read Pre-Schools location data in kml format.\n\npreschool = st_read(\"data/geospatial/preschools-location.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\annatrw\\IS415\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\preschools-location.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#checking-contents-of-simple-feature-dataframes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#checking-contents-of-simple-feature-dataframes",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "2.3 Checking contents of Simple Feature Dataframes",
    "text": "2.3 Checking contents of Simple Feature Dataframes\nTo retrieve and view basic feature information of the Masterplan subzone boundary (2014) layer, the following code chunk is used.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nTo further view associated attribute information in the dataframe, glimpse() from dplyr package and head() from Base R can be used below.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "2.4 Plotting the geospatial data",
    "text": "2.4 Plotting the geospatial data\n\nplot(mpsz)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nDefault plot of an sf object is multi-plot of all attributes\n\n\nTo plot only the geometry to view the subzone boundary:\n\nplot(st_geometry(mpsz))\n\n\n\n\nTo plot specific attributes for quick viewing:\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#buffering",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#buffering",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "5.1 Buffering",
    "text": "5.1 Buffering\nContext: A governmental organisation wants to retrofit and upgrade an existing cycling path that requires 5 meters of reserved land on either side of the current cycling path. How can we find out the total land area needed to be acquired?\nSolution:\n\nUsing a buffer of 5 meters around the cycling paths\n\n\nbuffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs = 30)\n\n\nCalculate the area of the buffers\n\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\n\nTherefore, the total area needed would be the sum of areas of buffers\n\n\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#point-in-polygon-count",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#point-in-polygon-count",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "5.2 Point-in-polygon count",
    "text": "5.2 Point-in-polygon count\nContext: How can we find out the number of pre-schools in each planning subzone?\nSolution: 1. Identify the count of pre-schools in each subzone\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nCheck summary statistics of newly derived ‘PreSch Count’ field\n\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\n\n\nListing the planning subzone with the highest number of pre-schools\n\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           58\n\n\nTampines East subzone has the most number of pre-schools.\n\nComputing the density of pre-schools by planning subzone\n\nFirst, derive the area of each planning subzone:\n\nmpsz3414$Area <- mpsz3414 %>% st_area()\n\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#histogram",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "6.1 Histogram",
    "text": "6.1 Histogram\nShows distribution of PreSch Density using conventional package from R Graphics.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nAppropriate histogram visualisation using ggplot2.\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, color=\"black\",  fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#scatterplot",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "6.2 Scatterplot",
    "text": "6.2 Scatterplot\nShows the relationship between PreSch Density and PreSch Count.\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`,  x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "",
    "text": "Installing and loading tidyverse and sf packages\n\npacman::p_load(tidyverse, sf, tmap)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-geospatial-data-in-shapefile-format",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-geospatial-data-in-shapefile-format",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "2.1 Importing geospatial data in shapefile format",
    "text": "2.1 Importing geospatial data in shapefile format\nUtilising sf package to read the Masterplan subzone boundary (2014) data in shapefile format.\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\annatrw\\IS415\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nChecking the simple feature object mpsz:\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-aspatial-data-in-csv-format",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-aspatial-data-in-csv-format",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "2.2 Importing aspatial data in csv format",
    "text": "2.2 Importing aspatial data in csv format\nImports the population census data in csv into R.\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-wrangling",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "3.1 Data wrangling",
    "text": "3.1 Data wrangling\n\npopdata2020 <- popdata %>%\nfilter(Time == 2020) %>%\ngroup_by(PA, SZ, AG) %>% summarise(`POP` = sum(`Pop`)) %>% ungroup()%>% pivot_wider(names_from=AG, values_from=POP) %>%\nmutate(YOUNG = rowSums(.[3:6]) +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#joining-aspatial-and-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#joining-aspatial-and-geospatial-data",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "3.2 Joining aspatial and geospatial data",
    "text": "3.2 Joining aspatial and geospatial data\nBefore performing a relational join on both datasets, the fields PZ and SZ in popdata2020 need to be capitalised since SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 <- popdata2020 %>%  mutate_at(\n.vars = vars(PA, SZ), \n.funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\n\n3.2.1 Perform left_join() on geospatial data\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-a-choropleth-map-using-qtm",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-a-choropleth-map-using-qtm",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "4.1 Plotting a choropleth map using qtm()",
    "text": "4.1 Plotting a choropleth map using qtm()\nThis function allows quick and easy plotting of choropleth maps, giving a quick overview of the data.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\nNote:\n\ntmap_mode(“plot”) gives a static map. For interactive viewing, the parameter “view” should be used.\nThe fill argument is used to map the attribute (ie: DEPENDENCY)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-a-choropleth-map-using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-a-choropleth-map-using-tmap",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "4.2 Plotting a choropleth map using tmap()",
    "text": "4.2 Plotting a choropleth map using tmap()\nTo plot a highly customisable cartographic choropleth map, tmap()’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nIn the following sub-sections, individual tmap functions used in the above code chunk will be introduced and explained.\n\n4.2.1 Plotting a base map\ntm_shape() is used to define input data, tm_polygons() is used to plot planning subzone ploygons.\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n4.2.2 Using tm_polygons()\nPlotting geographical distributions of a selected variable by planning subzone, use the parameter of choice (ie: DEPENDENCY).\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\nNote:\n\nInterval binning and colour scheme are customisable\nMissing values are default shaded grey\n\n\n\n4.2.3 Using tm_fill() and tm_border()\n\ntm_fill() fills the polygons with the chosen colour scheme\ntm_border() adds borders of the shapefile onto the choropleth map\ntm_polygons() wraps tm_fill() and tm_border()\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd=0.1, alpha=1)\n\n\n\n\nNote:\n\nalpha argument = transparency value ranging between 0 (transparent) and 1 (opaque)\nlwd = border line width; default value is 1\nlty = border line type; default value is “solid”"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-classification-of-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-classification-of-tmap",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "4.3 Data classification of tmap",
    "text": "4.3 Data classification of tmap\ntmap provides 10 data classification methods: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, jenks.\nTo define a data classification method, use the style argument of tm_fill() or tm_polygons().\nUsing kmeans data classification:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing equal data classification:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing fisher data classification:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing hclust data classification:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing jenks data classification:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n4.3.1 Changing the number of classes\nusing n= 2,6,10,20.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nObservation from changing increasing the number of classes: the more classes there are, the harder it is to differentiate the values, hence choosing an appropriate number of classes is crucial to an effective visualisation."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-choropleth-maps-with-custom-breaks",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-choropleth-maps-with-custom-breaks",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "4.4 Plotting choropleth maps with custom breaks",
    "text": "4.4 Plotting choropleth maps with custom breaks\nBreakpoints can be manually set to create a custom data classification. It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nDisplay descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nPlotting a map with custom breaks including a min and max value:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#colour-scheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#colour-scheme",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "4.5 Colour scheme",
    "text": "4.5 Colour scheme\nPre-defined colour ramps are pulled from the RColorBrewer package.\nUsing the tm_fill() argument, define the selected colour palette.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nReverse shading can be done by adding “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-RdPu\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nRefer  here  for more colour palette options."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#map-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#map-layouts",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "4.6 Map layouts",
    "text": "4.6 Map layouts\nMap titles, scale bar, north arrow, margins and aspect ratios create more cohesive maps.\n\n4.6.1 Map legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n4.6.2 Map style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\nOther available  map styles  include: “white”, “gray”, “natural”, “cobalt”, “col_blind”, “albatross”, “beaver”, “bw”, “watercolor”, “red”, “black”\n\n\n4.6.3 Cartographic furniture\ntm_compass(), tm_scale_bar(), tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nTo reset the default style:\n\ntmap_style(\"white\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-multiple-choropleth-maps",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-multiple-choropleth-maps",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "4.7 Plotting multiple choropleth maps",
    "text": "4.7 Plotting multiple choropleth maps\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n4.7.1 Assigning multiple values to at least one of the asthetic arguments\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Oranges\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n4.7.2 Defining a group-by variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Purples\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNote:\n\n thres.poly = a number that specifies the threshold at which polygons are taken into account; corresponds to the proportion of area sizes of polygons to total polygon size; default is 0\n free.coords = defines each map to have its own coordinate ranges; default is “TRUE”\n\n\n\n4.7.3 Creating multiple stand-alone maps with tmap_arrange()\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"YlGn\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"YlGn\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#mapping-spatial-object-meeting-selection-criterion",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#mapping-spatial-object-meeting-selection-criterion",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "4.8 Mapping spatial object meeting selection criterion",
    "text": "4.8 Mapping spatial object meeting selection criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"YlGn\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "",
    "text": "Aim: are the childcare centres in Singapore randomly distributed throughout the country? if no, then where are the locations with higher concentration of childcare centres?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-sf-data-to-sps-spatial-class",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-sf-data-to-sps-spatial-class",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.1 Converting sf data to sp’s Spatial class",
    "text": "4.1 Converting sf data to sp’s Spatial class\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Name,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Description \nmin values  :   kml_1, <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>018989</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>08F73931F4A691F4</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \nmax values  : kml_999,                  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>829646</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>RAFFLES KIDZ @ PUNGGOL PTE LTD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>379D017BF244B0FA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-spatial-class-into-generic-sp-object",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-spatial-class-into-generic-sp-object",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.2 Converting Spatial class into generic sp object",
    "text": "4.2 Converting Spatial class into generic sp object\nspatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial* classes into ppp object. We need to convert the Spatial classes* into Spatial object first.\nThe codes chunk below converts the Spatial* classes into generic sp objects.\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nDifference between Spatial classes and generic sp objects: - the generic sp objects (spatial polygons) will only store the spatial component of the data"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-generic-spatial-sp-format-to-spatstat-ppp-format",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-generic-spatial-sp-format-to-spatstat-ppp-format",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.3 Converting generic spatial sp format to spatstat ppp format",
    "text": "4.3 Converting generic spatial sp format to spatstat ppp format\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#handling-duplicated-points",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#handling-duplicated-points",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.4 Handling duplicated points",
    "text": "4.4 Handling duplicated points\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nTo count the number of co-indicence point, we will use the multiplicity() function as shown in the code chunk below.\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    1    1    3    1    1    1    1    2    1    1    1    1    1    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    1    1    1    1    1    1    1    1    1    9    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    1    1    1    2    1    1    3    1    1    1    1    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    1    1    1    1    2    1    1    1    1    1    2    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    3    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    1    1    1    1    1    2    1    1    1    3    1    1    1    2    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    3    2 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    2    1    1    1    2    2    3    1    5    1    5    1    1    1    2 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    1    1    2    1    1    1    1    1    1    2    1    1    1    1 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    4    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   1    1    1    1    1    2    2    1    1    1    1    2    1    4    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    3 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   1    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    1    1    1    1    1    9    1    1    2    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    5    1    1    1    1    1    2    1    1    2    2    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    2    2    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    9    1    1    1    1    1    1    1    1    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   1    1    2    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    9    9    1    1    1    1    1    1    1    1    1    1    2    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    2    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    2 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    3    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    1    1    1    1    1    1    1    3    1    1    1    1    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    2    2    1    1    1    1    2    1    1    2    1    1    1    2    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    2    1    1    1    1    1    9    1    4    1    2    1    1    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   2    1    1    1    1    1    1    1    2    1    2    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    1    1    1    1    2    1    2    1    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    4    1    1    1    1    1    4    1    1    1    1 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    4    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   3    1    1    1    2    1    1    1    3    1    1    3    1    1    1    1 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   1    1    1    1    1    1    1    1    1    2    2    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    1    1    1    1    1    1    1    2    2    1    1    1    5    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    9    1    2    2    1    1    1    2    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    2    1    1    1    3    1    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   9    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    2    1    2    1    1    1    2    2    2    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    3    1    1    1    1    1    1    1    1    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   1    1    1    1    1    1    1    1    4    1    1    1    1    1    2    1 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   1    1    1    1    1    1    1    1    1    9    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    2    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   1    1    1    1    1    1    1    1    1    1    5    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    2    1    1    1    1    2    1    1    1    1    3 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 \n   1    1    1    1    1    1    2    1    1 \n\n\nIf we want to know how many locations have more than one point event, we can use the code chunk below.\n\nsum(multiplicity(childcare_ppp) > 1)\n\n[1] 128\n\n\nGetting the location of duplicated point events\n\ntmap_mode('view')\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\n\ntmap_mode('plot')\n\nWays to handle duplicate points:\n\nDeleting duplicates; which would risk data loss.\nJittering; which adds small variations to duplicates so they do not occupy the exact same space.\nMaking each point ‘unique’; and attach the duplicates of the points to the patterns as marks, as attributes of the points. Then you would need analytical techniques that take into account these marks.\n\nImplementation of approach 2, jittering\n\nchildcare_ppp_jit <- rjitter(childcare_ppp,\n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-owin-object",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-owin-object",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.5 Creating owin object",
    "text": "4.5 Creating owin object\nIn spatstat, owin objects are used to represent polygonal region (Singapore boundary). This helps explicitly define the required specific study area to prevent randomised points from falling out of the study area.\n\nsg_owin <- as(sg_sp, \"owin\")\n\n\nplot(sg_owin)\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#combining-point-features-and-owin-objects",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#combining-point-features-and-owin-objects",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.6 Combining point features and owin objects",
    "text": "4.6 Combining point features and owin objects\nExtract the childcare points located within Singapore\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 2.063463e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#kernal-density-estimation-kde",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#kernal-density-estimation-kde",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "5.1 Kernal density estimation (KDE)",
    "text": "5.1 Kernal density estimation (KDE)\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\nThe intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is FALSE.\n\n\nkde_childcareSG_bw <- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nplot(kde_childcareSG_bw)\n\n\n\n\nThe density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in “number of points per square meter”.\nBefore we move on to next section, it is good to know that you can retrieve the bandwidth used to compute the kde layer by using the code chunk below.\n\nbw <- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n298.4095 \n\n\n\n5.1.1 Rescaling KDE values\nConverting meter to kilometer\n\nchildcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, \"km\")\n\n\nkde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\n\nblue: there are 0 to 5 childcare centers per 1km square\nyellow: 20 to 25 childcare centers per 1m square\n\nNotice that the legend is changed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#automatic-badwidth-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#automatic-badwidth-methods",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "5.2 Automatic badwidth methods",
    "text": "5.2 Automatic badwidth methods\nBeside bw.diggle(), there are three other spatstat functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().\n\n bw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\n\n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\n\n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2984095 \n\n\nComparing outputs of bw.diggle() and bw.ppl() methods\n\nkde_childcareSG.ppl <- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#kernel-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#kernel-methods",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "5.3 Kernel methods",
    "text": "5.3 Kernel methods\nBy default, the kernel method used in density.ppp() is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics.\nThe code chunk below will be used to compute three more kernel density estimations by using these three kernel function.\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#computing-kde-by-fixed-bandwidth",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#computing-kde-by-fixed-bandwidth",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "6.1 Computing KDE by Fixed bandwidth",
    "text": "6.1 Computing KDE by Fixed bandwidth\n\nkde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\n\nsigma value is 0.6 as unit for childcareSG_ppp.km object is in kilometer (0.6km = 600m).\n\n\nfor example- primary school buffer of 1km"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#computing-kde-by-adaptive-bandwidth",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#computing-kde-by-adaptive-bandwidth",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "6.2 Computing KDE by Adaptive bandwidth",
    "text": "6.2 Computing KDE by Adaptive bandwidth\n\nkde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\nthe kernel size is shorter, KDE will appear more pixelised\n\nConverting KDE outputs to grid object to be suitable for mapping - Grid output allows conversion to raster format\n\ngridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\nConverting gridded output to raster format\n\nkde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)\n\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\nAssigning projection systems to raster layer\n\nprojection(kde_childcareSG_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:3414 \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\nVisualising raster output on tmap\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#comparing-spatial-point-patterns-using-kde",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#comparing-spatial-point-patterns-using-kde",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "6.3 Comparing spatial point patterns using KDE",
    "text": "6.3 Comparing spatial point patterns using KDE\nComparing KDE of childcare centres in Punggol, Tampines, Chua Chu Kang and Jurong West planning areas.\nExtracting target planning areas\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\nConvert Spatial Polygon Dataframe layers into generic spatial polygon layers\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\nConvert spatial polygon objects into owin objects required by spatstat\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\nCombine childcare centre location points and study area: here the childcare points are extracted for analysis\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\nChange the unit of measurement from metre to kilometre\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nPlot showing the 4 study areas and childcare centres.\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\nComputing KDE\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\n\n\n\n\nComputing fixed bandwidth KDE\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "7.1 Testing spatial point patterns using Clark and Evans Test",
    "text": "7.1 Testing spatial point patterns using Clark and Evans Test\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  childcareSG_ppp\nR = 0.54756, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\nConclusion: Since the p-value is less than the alpha value of 0.05, there is sufficient evidence to reject the null hypothesis that childcare services are randomly distributed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#clark-and-evans-test-on-choa-chu-kang",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#clark-and-evans-test-on-choa-chu-kang",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "7.2 Clark and Evans test on Choa Chu Kang",
    "text": "7.2 Clark and Evans test on Choa Chu Kang\n\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 999 simulations of CSR with fixed n\n\ndata:  childcare_ck_ppp\nR = 0.95094, p-value = 0.106\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#clark-and-evans-test-on-tampines",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#clark-and-evans-test-on-tampines",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "7.3 Clark and Evans test on Tampines",
    "text": "7.3 Clark and Evans test on Tampines\n\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 999 simulations of CSR with fixed n\n\ndata:  childcare_tm_ppp\nR = 0.7898, p-value = 0.002\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Exercise 2: Geospatial Data Wrangling",
    "section": "",
    "text": "Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world’s accessible freshwater.\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.\nTo address the issue of providing clean and sustainable water supply to the rural community, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#installing-appropriate-r-packages",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#installing-appropriate-r-packages",
    "title": "In-class Exercise 2: Geospatial Data Wrangling",
    "section": "2.1 Installing appropriate R packages",
    "text": "2.1 Installing appropriate R packages\n\n\nShow the code\npacman::p_load(sf, tidyverse,funModeling)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-geoboundaries-data",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-geoboundaries-data",
    "title": "In-class Exercise 2: Geospatial Data Wrangling",
    "section": "2.2 Importing geoboundaries data",
    "text": "2.2 Importing geoboundaries data\n\ngeoNGA <- st_read(\"data/geospatial/\", layer=\"geoBoundaries-NGA-ADM2\")  %>% st_transform(crs= 26392)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `C:\\annatrw\\IS415\\In-class_Ex\\In-class_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-nga-data-set",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-nga-data-set",
    "title": "In-class Exercise 2: Geospatial Data Wrangling",
    "section": "2.3 Importing NGA data set",
    "text": "2.3 Importing NGA data set\n\nNGA <- st_read(\"data/geospatial/\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\") %>%\n  st_transform(crs = 26392)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\annatrw\\IS415\\In-class_Ex\\In-class_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-aspatial-data",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-aspatial-data",
    "title": "In-class Exercise 2: Geospatial Data Wrangling",
    "section": "2.4 Importing aspatial data",
    "text": "2.4 Importing aspatial data\nWaterpoint data from Humanitarian website\n\n\nShow the code\nwp_nga <- read_csv(\"data/aspatial/WPdx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\")\n\n\n\n2.4.1 Converting data from aspatial to geospatial\nConverts aspatial data into a simple feature object because aspatial data does not have geospatial information although latitude and londitude columns are present in the dataset. The function st_as_sfc() converts the selected column into a tibble data frame.\n\n\nShow the code\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nwp_nga\n\n\n# A tibble: 95,008 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\n\n2.4.2 Converts tibble data frame into sf object with the function st_sf()\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf <- wp_sf %>% st_transform(crs=26392)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#geospatial-data-cleaning",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#geospatial-data-cleaning",
    "title": "In-class Exercise 2: Geospatial Data Wrangling",
    "section": "2.5 Geospatial data cleaning",
    "text": "2.5 Geospatial data cleaning\nRemoving redundant fields using dplyr select()\n\nNGA <- NGA %>% select (c(3:4,8:9))\n\nChecking for duplicate name using Base R duplicated()\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]\n\n[1] \"Bassa\"    \"Ifelodun\" \"Irepodun\" \"Nasarawa\" \"Obi\"      \"Surulere\"\n\n\nThe above code shows the duplicated fields with the same name from different states (ADM1_PCODE).\nTo fix the duplicated values, replace the duplicated rows with\n\nNGA$ADM2_EN[94] <- \"Bassa, Kogi\"\nNGA$ADM2_EN[95] <- \"Bassa, Plateau\"\nNGA$ADM2_EN[304] <- \"Ifelodun, Kwara\"\nNGA$ADM2_EN[305] <- \"Ifelodun, Osun\"\nNGA$ADM2_EN[355] <- \"Irepodun, Kwara\"\nNGA$ADM2_EN[356] <- \"Irepodun, Osun\"\nNGA$ADM2_EN[519] <- \"Nasarawa, Kano\"\nNGA$ADM2_EN[520] <- \"Nasarawa, Nasarawa\"\nNGA$ADM2_EN[546] <- \"Obi, Benue\"\nNGA$ADM2_EN[547] <- \"Obi, Nasarawa\"\nNGA$ADM2_EN[693] <- \"Surulere, Lagos\"\nNGA$ADM2_EN[694] <- \"Surulere, Oyo\"\n\n\nfreq(data = wp_sf,\n     input = '#status_clean')\n\n\n\n\n                     #status_clean frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                             <NA>     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n\n\n\nrename() is used to rename the column from #status_clean to status_clean (removing the hash icon)\nselect() is used to include status_clean in the outputs of sf data frame\nmutate() and replace_na() replaces the NA values in status_clean field into ‘unknown’\n\n\nwp_sf_nga <- wp_sf %>% \n  rename(status_clean = '#status_clean') %>%\n  select(status_clean) %>%\n  mutate(status_clean = replace_na(status_clean, \"unknown\"))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#extracting-water-point-data",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#extracting-water-point-data",
    "title": "In-class Exercise 2: Geospatial Data Wrangling",
    "section": "2.6 Extracting water point data",
    "text": "2.6 Extracting water point data\nFunctional water point data\n\nwp_functional <- wp_sf_nga %>%\n  filter(status_clean %in% \n  c(\"Functional\", \"Functional but not in use\", \"Functional but needs repair\"))\n\nNon-functional water point data\n\nwp_nonfunctional <- wp_sf_nga %>%\n  filter(status_clean %in% \n  c(\"Abandoned/Decommissioned\", \"Abandoned\", \"Non-Functional due to dry season\", \"Non-Functional\",\"Non functional due to dry season\"))\n\n\nwp_unkown <- wp_sf_nga %>%\n  filter(status_clean == \"unknown\")\n\nFinding water points that fall within each LGA length() used to calculate number of water points\n\nNGA_wp <- NGA %>%\n  mutate(`total_wp` = lengths(st_intersects(NGA, wp_sf_nga))) %>%\n  mutate(`wp_functional` = lengths(st_intersects(NGA, wp_functional))) %>%\n  mutate(`wp_nonfunctional` = lengths(st_intersects(NGA, wp_nonfunctional))) %>%\n  mutate(`wp_unknown` = lengths(st_intersects(NGA, wp_unkown)))\n\n\nwrite_rds(NGA_wp, \"data/rds/NGA_wp.rds\")\n\nUsing ggplot2 to visualise distribution of water points.\n\nggplot(data = NGA_wp, aes(x=total_wp)) + geom_histogram(bins=20, color=\"black\", fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(total_wp, na.rm=T)), color=\"red\", linetype=\"dashed\", size = 0.8 ) +\n  ggtitle(\"Distribution of total water points by LGA\") + \n  xlab(\"No. of water points\") +\n  ylab (\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle=0))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "",
    "text": "Installing and loading packages\n\npacman::p_load(tidyverse, sf, tmap)\n\nImporting data\n\n\n\n\n\n\nNote\n\n\n\nImport NGP_wp.rds created in In-class Exercise 2\n\n\n\nNGA_wp <- read_rds(\"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#choropleth-map-of-functional-water-points",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#choropleth-map-of-functional-water-points",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "2.1 Choropleth map of functional water points",
    "text": "2.1 Choropleth map of functional water points\n\np1 <- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\", n = 10,\n          style = \"equal\",\n          palette = \"Blues\")+\n  tm_borders(lwd = 0.1,\n             alpha=1) +\n  tm_layout(main.title = \"Distribution of functional water points by LGA\", legend.outside=FALSE)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#choropleth-of-total-water-points",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#choropleth-of-total-water-points",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "2.2 Choropleth of total water points",
    "text": "2.2 Choropleth of total water points\n\np2 <- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\", n = 10,\n          style = \"equal\",\n          palette = \"Blues\")+\n  tm_borders(lwd = 0.1,\n             alpha=1) +\n  tm_layout(main.title = \"Total water points by LGA\", legend.outside=FALSE)\n\n\ntmap_arrange(p2, p1, nrow=1)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#plotting",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#plotting",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "3.1 Plotting",
    "text": "3.1 Plotting\n\ntm_shape(NGA_wp)+\n  tm_fill(\"pct_functional\",\n          n=10,\n          style=\"equal\",\n          palette=\"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd=0.1,\n             alpha=1)+\n  tm_layout(main.title=\"Rate map of functional water points\", \n            legend.outside = TRUE)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#percentile-map",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#percentile-map",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "4.1 Percentile Map",
    "text": "4.1 Percentile Map\n\n4.1.1 Data preparation\nStep 1: Removing NA values\n\nNGA_wp <- NGA_wp %>% drop_na()\n\nStep 2: Customised classification and extracting values\n\npercent <- c(0,.01,.1,.5,.9,.99,1)\nvar <- NGA_wp[\"pct_functional\"] %>%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n\n\n4.1.2 Functions\nMapping functions that simplify the mapping process and reduces the likelihood of mistakes\n\n\n4.1.3 get.var function\nExtracts a variable (i.e. wp_nonfunctional) as a vector out of an sf data.frame.\n\ninputs:\n\nvname: variable name\ndf: name of the sf data frame\n\noutput:\n\nv: a vector with values\n\n\n\nget.var <- function(vname,df){\n  v<- df[vname] %>%\n    st_set_geometry(NULL)\n  v<- unname(v[,1])\n  return(v)\n}\n\n\n\n4.1.4 Percentile function\n\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent <- c(0,.01,.1,.5,.9,.99,1)\n  var <- get.var(vnam, df)\n  bperc <- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"< 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"> 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\n\n\n4.1.5 Running or Calling the function\n\npercentmap(\"total_wp\", NGA_wp)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#box-map",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#box-map",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "4.2 Box Map",
    "text": "4.2 Box Map\nUses custom breaks specifications which depend on lower or upper outliers.\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#boxbreak-function",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#boxbreak-function",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "4.3 Boxbreak function",
    "text": "4.3 Boxbreak function\nSimilarly, functions can be created for custom boxbreaks\n\ninputs:\n\nv: vector with observations\nmult: multiplier for IQR\n\noutput:\n\nbb: vector with 7 break points that compute quantile and fence\n\n\n\nboxbreaks <- function(v,mult=1.5) {\n  qv <- unname(quantile(v))\n  iqr <- qv[4] - qv[2]\n  upfence <- qv[4] + mult * iqr\n  lofence <- qv[2] - mult * iqr\n  # initialize break points vector\n  bb <- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence < qv[1]) {  # no lower outliers\n    bb[1] <- lofence\n    bb[2] <- floor(qv[1])\n  } else {\n    bb[2] <- lofence\n    bb[1] <- qv[1]\n  }\n  if (upfence > qv[5]) { # no upper outliers\n    bb[7] <- upfence\n    bb[6] <- ceiling(qv[5])\n  } else {\n    bb[6] <- upfence\n    bb[7] <- qv[5]\n  }\n  bb[3:5] <- qv[2:4]\n  return(bb)\n}"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#get.var-function-1",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#get.var-function-1",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "4.4 get.var function",
    "text": "4.4 get.var function\n\ninputs:\n\nvname: variable name (as character in quotes)\ndf: name of the sf data frame\n\noutput:\n\nv: a vector with values (without column name)\n\n\nget.var <- function(vname,df) {\n  v <- df[vname] %>% st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#running-the-newly-created-function",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#running-the-newly-created-function",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "4.5 Running the newly created function",
    "text": "4.5 Running the newly created function\n\nvar <- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#boxmap-function",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#boxmap-function",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "4.6 Boxmap function",
    "text": "4.6 Boxmap function\n\narguments:\n\nvnam: variable name\ndf: simple feature polygon layer\nlegtitle: legend title\nmtitle: map title\nmult: multiplier for IQR\n\noutput: tmap element that plots the map\n\n\nboxmap <- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var <- get.var(vnam,df)\n  bb <- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"< 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"> 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "",
    "text": "Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:\n\nevents such as crime, traffic accident and disease onset, or\nbusiness services (coffee and fastfood outlets) or facilities such as childcare and eldercare.\n\nUsing appropriate functions of spatstat, this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.\nThe specific questions we would like to answer are as follows:\nare the childcare centres in Singapore randomly distributed throughout the country? if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#convert-sf-data-to-sp-spatial-class",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#convert-sf-data-to-sp-spatial-class",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "4.1 Convert sf data to sp Spatial class",
    "text": "4.1 Convert sf data to sp Spatial class\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Name,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Description \nmin values  :   kml_1, <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>018989</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>08F73931F4A691F4</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \nmax values  : kml_999,                  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>829646</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>RAFFLES KIDZ @ PUNGGOL PTE LTD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>379D017BF244B0FA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#convert-spatial-class-into-generic-sp-format",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#convert-spatial-class-into-generic-sp-format",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "4.2 Convert Spatial class into generic sp format",
    "text": "4.2 Convert Spatial class into generic sp format\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#convert-generic-sp-format-to-spatstats-ppp-format",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#convert-generic-sp-format-to-spatstats-ppp-format",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "4.3 Convert generic sp format to spatstat’s ppp format",
    "text": "4.3 Convert generic sp format to spatstat’s ppp format\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#duplicate-points",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#duplicate-points",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "4.4 Duplicate points",
    "text": "4.4 Duplicate points\nCheck for presence of duplicate points\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nCount the number of co-incidence points\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    1    1    3    1    1    1    1    2    1    1    1    1    1    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    1    1    1    1    1    1    1    1    1    9    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    1    1    1    2    1    1    3    1    1    1    1    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    1    1    1    1    2    1    1    1    1    1    2    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    3    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    1    1    1    1    1    2    1    1    1    3    1    1    1    2    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    3    2 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    2    1    1    1    2    2    3    1    5    1    5    1    1    1    2 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    1    1    2    1    1    1    1    1    1    2    1    1    1    1 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    4    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   1    1    1    1    1    2    2    1    1    1    1    2    1    4    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    3 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   1    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    1    1    1    1    1    9    1    1    2    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    5    1    1    1    1    1    2    1    1    2    2    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    2    2    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    9    1    1    1    1    1    1    1    1    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   1    1    2    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    9    9    1    1    1    1    1    1    1    1    1    1    2    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    2    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    2 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    3    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    1    1    1    1    1    1    1    3    1    1    1    1    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    2    2    1    1    1    1    2    1    1    2    1    1    1    2    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    2    1    1    1    1    1    9    1    4    1    2    1    1    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   2    1    1    1    1    1    1    1    2    1    2    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    1    1    1    1    2    1    2    1    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    4    1    1    1    1    1    4    1    1    1    1 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    4    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   3    1    1    1    2    1    1    1    3    1    1    3    1    1    1    1 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   1    1    1    1    1    1    1    1    1    2    2    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    1    1    1    1    1    1    1    2    2    1    1    1    5    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    9    1    2    2    1    1    1    2    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    2    1    1    1    3    1    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   9    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    2    1    2    1    1    1    2    2    2    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    3    1    1    1    1    1    1    1    1    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   1    1    1    1    1    1    1    1    4    1    1    1    1    1    2    1 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   1    1    1    1    1    1    1    1    1    9    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    2    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   1    1    1    1    1    1    1    1    1    1    5    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    2    1    1    1    1    2    1    1    1    1    3 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 \n   1    1    1    1    1    1    2    1    1 \n\n\nCompute the number of locations with more than 1 point event\n\nsum(multiplicity(childcare_ppp) >1)\n\n[1] 128\n\n\nManaging duplicates by jittering approach\n\nchildcare_ppp_jit <- rjitter(childcare_ppp,\n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#creating-owin-object",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#creating-owin-object",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "4.5 Creating owin object",
    "text": "4.5 Creating owin object\nIn spatstat, owin objects are used to represent polygonal region (Singapore boundary). This helps explicitly define the required specific study area to prevent randomised points from falling out of the study area.\n\nsg_owin <- as(sg_sp, \"owin\")\n\n\nplot(sg_owin)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#combining-point-features-and-owin-objects",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#combining-point-features-and-owin-objects",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "4.6 Combining point features and owin objects",
    "text": "4.6 Combining point features and owin objects\nExtract the childcare points located within Singapore\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 2.063463e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nplot(childcareSG_ppp)\n\n\n\n\nExtracting target planning areas\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\nConvert Spatial Polygon Dataframe layers into generic spatial polygon layers\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\nConvert spatial polygon objects into owin objects required by spatstat\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\nChange the unit of measurement from metre to kilometre\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nPlot showing the 4 study areas and childcare centres.\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#analysing-spatial-point-process-using-g-function",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#analysing-spatial-point-process-using-g-function",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "5.1 Analysing Spatial Point Process using G-Function",
    "text": "5.1 Analysing Spatial Point Process using G-Function\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, you will learn how to compute G-function estimation by using Gest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\n5.1.1 Choa Chu Kang planning area\nG function estimation\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\nComplete Spatial Randomness test\nH0 (null hypothesis) = The distribution of childcare services at Choa Chu Kang are randomly distributed\nH1 = The distribution of childcare services at Choa Chu Kang are not randomly distributed\nReject the null hypothesis if the p-value is smaller than the alpha value of 0.001.\nMonte Carlo test with G function\n\nG_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\n5.1.2 Tampines planning area\nG function estimation\n\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n\n\n\n\nComplete Spatial Randomness test\nH0 (null hypothesis) = The distribution of childcare services at Tampines are randomly distributed\nH1 = The distribution of childcare services at Tampines are not randomly distributed\nReject the null hypothesis if the p-value is smaller than the alpha value of 0.001.\nMonte Carlo test with G function\n\nG_tm.csr <- envelope(childcare_tm_ppp, Gest, correction=\"all\",nsim=999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_tm.csr)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/data/stores.html",
    "href": "In-class_Ex/In-class_Ex05/data/stores.html",
    "title": "IS415",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     \n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/data/study_area.html",
    "href": "In-class_Ex/In-class_Ex05/data/study_area.html",
    "title": "IS415",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "1 Getting Started\n\n\n2 Installing and loading R packages\nsfdep package allows us to perform colocation methods\n\npacman::p_load(sf, tmap, tidyverse, sfdep)\n\n\nstudyArea <- st_read(dsn=\"data\",\n                     layer=\"study_area\") %>% st_transform(crs=3829)\n\nReading layer `study_area' from data source \n  `C:\\annatrw\\IS415\\In-class_Ex\\In-class_Ex05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 7 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 121.4836 ymin: 25.00776 xmax: 121.592 ymax: 25.09288\nGeodetic CRS:  TWD97\n\n\n\nstores <- st_read(dsn=\"data\",\n                     layer=\"stores\") %>% st_transform(crs=3829)\n\nReading layer `stores' from data source \n  `C:\\annatrw\\IS415\\In-class_Ex\\In-class_Ex05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 1409 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 121.4902 ymin: 25.01257 xmax: 121.5874 ymax: 25.08557\nGeodetic CRS:  TWD97\n\n\n[reference this for take home 1] [always plot polygon then points so points will not be blocked by polygon] [plotting functional and non-functional water point]\n\ntmap_mode(\"view\")\ntm_shape(studyArea) +\n  tm_polygons() +\ntm_shape(stores) +\n  tm_dots(col = \"Name\", \n          size = 0.01,\n          border.col=\"black\",\n          border.lwd=0.5  )\n\n\n\n\n\ntm_view(set.zoom.limits = c(12,16))\n\n$tm_layout\n$tm_layout$set.zoom.limits\n[1] 12 16\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\"\n\n\nSearching for the 6 nearest neighbours (using adaptive kernel density method) - choosing 6 nearest since the target point is included in function as well (total 7 and will not get an even split)\n\nnb <- include_self(st_knn(st_geometry(stores), 6))\n\n\nwt <- st_kernel_weights(nb, stores, \"gaussian\", adaptive=TRUE)\n\nFiltering out stores that are family marts and convert into a dataframe, before saving into a variable A\n\nFamilyMart <- stores %>% filter(Name==\"Family Mart\")\nA <-FamilyMart$Name\n\n\nSevenEleven <- stores %>% filter(Name==\"7-Eleven\")\nB <-SevenEleven$Name\n\nA is target, B is neighbour category at 50 simulations outputs the p value directly\n\nLCLQ <- local_colocation(A,B,nb,wt,49)\n\n\nLCLQ_stores <- cbind(stores,LCLQ)\n\n\ncannot do relational join on LCLQ and LCLQ_stores since there is no unique identifier of LCLQ\nusing cbind function only works if you do not sort the original input data\ncbind inherits the properties of the first parameter\n\n\ntmap_mode(\"view\")\ntm_shape(studyArea) +\n  tm_polygons() +\ntm_shape(LCLQ_stores) +\n  tm_dots(col = \"X7.Eleven\",\n          size = 0.01,\n          border.col=\"black\",\n          border.lwd=0.5  )\n\n\n\n\n\ntm_view(set.zoom.limits = c(12,16))\n\n$tm_layout\n$tm_layout$set.zoom.limits\n[1] 12 16\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\""
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Anna’s IS415 journey",
    "section": "",
    "text": "Welcome to IS415 Geospatial Analytics and Applications!\n\n\n\nGeospatial analysis icon\n\n\n\n\n\n\n\n\ncallout title\n\n\n\ntesting callout content\n\n\n\ntab1tab2tab3\n\n\ntesting\n\n\ncontent\n\n\nsome random content\n\n\n\n\nGeospatial definition\n\nsome definition here\n\n\n\ntext here\n\n\ntext here\n\n\ntext here\n\n\ntext here\n\n\ntext here\n\n\ntext here\n\n\ntext here"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "",
    "text": "Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world’s accessible freshwater.\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.\nTo address the issue of providing clean and sustainable water supply to the rural community, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#quarto",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#quarto",
    "title": "Take Home Exercise 1",
    "section": "2 Quarto",
    "text": "2 Quarto\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#running-code",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#running-code",
    "title": "Take Home Exercise 1",
    "section": "3 Running Code",
    "text": "3 Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#analysing-spatial-point-process-using-f-function",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#analysing-spatial-point-process-using-f-function",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "5.2 Analysing Spatial Point Process using f-Function",
    "text": "5.2 Analysing Spatial Point Process using f-Function\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, you will learn how to compute F-function estimation by using Fest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\n5.2.1 Choa Chu Kang planning area\nF function estimation\n\nF_CK =Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\nComplete Spatial Randomness test\nH0 (null hypothesis) = The distribution of childcare services at Choa Chu Kang are randomly distributed\nH1 = The distribution of childcare services at Choa Chu Kang are not randomly distributed\nReject the null hypothesis if the p-value is smaller than the alpha value of 0.001.\nMonte Carlo test with F function\n\nF_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(F_CK.csr)\n\n\n\n\n\n\n5.2.2 Tampines planning area\nF function estimation\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\nComplete Spatial Randomness test\nH0 (null hypothesis) = The distribution of childcare services at Tampines are randomly distributed\nH1 = The distribution of childcare services at Tampines are not randomly distributed\nReject the null hypothesis if the p-value is smaller than the alpha value of 0.001.\nMonte Carlo test with F function\n\nF_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(F_tm.csr)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#analysing-spatial-point-using-k-function",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#analysing-spatial-point-using-k-function",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "5.3 Analysing Spatial Point using K function",
    "text": "5.3 Analysing Spatial Point using K function\nK-function measures the number of events found up to a given distance of any particular event. In this section, you will learn how to compute K-function estimates by using Kest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\n5.3.1 Choa Chu Kang planning area\nk function estimation\n\n\n\n\n\n\n\n\n\n\n\n5.3.2 Tampines planning area"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#aspatial-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#aspatial-data",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "4.1 Aspatial data",
    "text": "4.1 Aspatial data\nData from WPdx Global Data Repositories will be used. The WPdx+ dataset will be used in this assignment."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#spatial-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#spatial-data",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "4.2 Spatial data",
    "text": "4.2 Spatial data\nThe state boundary data of Nigeria is obtained from  Humanitarian Data Exchange portal. Download the Nigeria - Subnational Administrative Boundaries zip file titled nga_adm_osgof_20190417.zip"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-nga-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-nga-data",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "6.1 Importing NGA data",
    "text": "6.1 Importing NGA data\nWe will be using Administrative Boundary 2 of Nigeria - showing the local government areas within each state.\nUsing st_read() from sf’s package, import both layers of data and assign the CRS code 26391.\n\nNGA_adm2 <- st_read(\"data/geospatial/\", layer = \"nga_admbnda_adm2\") %>% st_transform(crs = 26391)\n\nReading layer `nga_admbnda_adm2' from data source \n  `C:\\annatrw\\IS415\\Take-home_Ex\\Take-home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#retaining-essential-columns",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#retaining-essential-columns",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "6.2 Retaining essential columns",
    "text": "6.2 Retaining essential columns\nRemoval of unnecessary columns is done, keeping only the name and PCODE of administrative boundaries 1 and 2.\n\nNGA_adm2 <- NGA_adm2 %>%\n  dplyr::select(c(3:4, 8:9))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#managing-duplicates",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#managing-duplicates",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "6.3 Managing duplicates",
    "text": "6.3 Managing duplicates\nCheck if there are duplicated values in the dataset. We see a total of 6 duplicates.\n\nNGA_adm2$ADM2_EN[duplicated(NGA_adm2$ADM2_EN)==TRUE]\n\n[1] \"Bassa\"    \"Ifelodun\" \"Irepodun\" \"Nasarawa\" \"Obi\"      \"Surulere\"\n\n\nManually assign missing values to the duplicated LGA names.\n\nNGA_adm2$ADM2_EN[94] <- \"Bassa, Kogi\"\nNGA_adm2$ADM2_EN[95] <- \"Bassa, Plateau\"\nNGA_adm2$ADM2_EN[304] <- \"Ifelodun, Kwara\"\nNGA_adm2$ADM2_EN[305] <- \"Ifelodun, Osun\"\nNGA_adm2$ADM2_EN[355] <- \"Irepodun, Kwara\"\nNGA_adm2$ADM2_EN[356] <- \"Irepodun, Osun\"\nNGA_adm2$ADM2_EN[519] <- \"Nasarawa, Kano\"\nNGA_adm2$ADM2_EN[520] <- \"Nasarawa, Nasarawa\"\nNGA_adm2$ADM2_EN[546] <- \"Obi, Benue\"\nNGA_adm2$ADM2_EN[547] <- \"Obi, Nasarawa\"\nNGA_adm2$ADM2_EN[693] <- \"Surulere, Lagos\"\nNGA_adm2$ADM2_EN[694] <- \"Surulere, Oyo\"\n\nCheck once more if all duplicates are removed:\n\nNGA_adm2$ADM2_EN[duplicated(NGA_adm2$ADM2_EN)==TRUE]\n\ncharacter(0)\n\n\nDuplicates have been successfully managed!"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extracting-osun-study-area",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extracting-osun-study-area",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "6.4 Extracting Osun study area",
    "text": "6.4 Extracting Osun study area\nFilter and extract the LGAs in Osun state using the column ADM1_EN, saving into a variable osunT.\n\nosunT <- NGA_adm2 %>% filter(`ADM1_EN` == \"Osun\")\nosunT\n\nSimple feature collection with 30 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 178398.7 ymin: 329463.4 xmax: 292278.9 ymax: 452734.9\nProjected CRS: Minna / Nigeria West Belt\nFirst 10 features:\n          ADM2_EN ADM2_PCODE ADM1_EN ADM1_PCODE                       geometry\n1        Aiyedade   NG030001    Osun      NG030 MULTIPOLYGON (((215920.8 33...\n2        Aiyedire   NG030002    Osun      NG030 MULTIPOLYGON (((214352.3 40...\n3  Atakumosa East   NG030003    Osun      NG030 MULTIPOLYGON (((267717.8 37...\n4  Atakumosa West   NG030004    Osun      NG030 MULTIPOLYGON (((250576.1 40...\n5      Boluwaduro   NG030005    Osun      NG030 MULTIPOLYGON (((267547.9 42...\n6          Boripe   NG030006    Osun      NG030 MULTIPOLYGON (((256469.1 43...\n7       Ede North   NG030007    Osun      NG030 MULTIPOLYGON (((238094.5 40...\n8       Ede South   NG030008    Osun      NG030 MULTIPOLYGON (((238094.5 40...\n9        Egbedore   NG030009    Osun      NG030 MULTIPOLYGON (((222300.9 42...\n10         Ejigbo   NG030010    Osun      NG030 MULTIPOLYGON (((216011.1 42..."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-water-point-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-water-point-data",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "7.1 Importing water point data",
    "text": "7.1 Importing water point data\nRead the csv of water point locations found in Nigeria, filtering by the column name #clean_country_name.\n\nwp_nga <- read_csv(\"data/aspatial/WPdx-P.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-aspatial-data-into-sf-dataframe",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-aspatial-data-into-sf-dataframe",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "7.2 Converting aspatial data into sf dataframe",
    "text": "7.2 Converting aspatial data into sf dataframe\nThis step ensures that the water point dataset is given a geometry column named New Georeferenced Column.\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nwp_nga\n\n# A tibble: 97,478 × 75\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 158721 Federal Minis…    5.07    6.62 02/19/… Yes     Boreho… Well    Mechan…\n 2 158892 Federal Minis…    5.09    7.09 02/06/… Yes     Boreho… Well    Hand P…\n 3 323117 Federal Minis…    5.91    8.77 08/31/… Yes     Boreho… Well    Hand P…\n 4 300176 Federal Minis…    5.23    7.32 05/17/… Yes     Boreho… Well    Mechan…\n 5 324346 Federal Minis…    6.88    3.36 08/17/… Yes     Boreho… Well    Mechan…\n 6 297273 Federal Minis…    6.59    3.29 05/26/… Yes     Boreho… Well    Mechan…\n 7 296853 Federal Minis…    6.60    3.26 06/02/… Yes     Boreho… Well    Mechan…\n 8 323866 Federal Minis…    6.20    6.73 09/18/… Yes     Boreho… Well    Mechan…\n 9 297044 Federal Minis…    6.61    3.30 05/26/… Yes     Boreho… Well    Mechan…\n10 324321 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n# … with 97,468 more rows, 66 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\nWe need to include a referencing system for the create sf object wp_nga.\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf\n\nSimple feature collection with 97478 features and 74 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2.707441 ymin: 4.301812 xmax: 14.21828 ymax: 13.86568\nGeodetic CRS:  WGS 84\n# A tibble: 97,478 × 75\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 158721 Federal Minis…    5.07    6.62 02/19/… Yes     Boreho… Well    Mechan…\n 2 158892 Federal Minis…    5.09    7.09 02/06/… Yes     Boreho… Well    Hand P…\n 3 323117 Federal Minis…    5.91    8.77 08/31/… Yes     Boreho… Well    Hand P…\n 4 300176 Federal Minis…    5.23    7.32 05/17/… Yes     Boreho… Well    Mechan…\n 5 324346 Federal Minis…    6.88    3.36 08/17/… Yes     Boreho… Well    Mechan…\n 6 297273 Federal Minis…    6.59    3.29 05/26/… Yes     Boreho… Well    Mechan…\n 7 296853 Federal Minis…    6.60    3.26 06/02/… Yes     Boreho… Well    Mechan…\n 8 323866 Federal Minis…    6.20    6.73 09/18/… Yes     Boreho… Well    Mechan…\n 9 297044 Federal Minis…    6.61    3.30 05/26/… Yes     Boreho… Well    Mechan…\n10 324321 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n# … with 97,468 more rows, 66 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\nWe then transform the sf object using the appropriate CRS for Osun state.\n\nwp_sf <- wp_sf %>% st_transform(crs=26391)\n\nFilter the water points found in Osun state using the #clean_adm1 column.\n\nwp_osun <- wp_sf %>% filter(`#clean_adm1` == \"Osun\")\nwp_osun\n\nSimple feature collection with 5745 features and 74 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 179198.9 ymin: 338261.8 xmax: 292542.7 ymax: 449013.7\nProjected CRS: Minna / Nigeria West Belt\n# A tibble: 5,745 × 75\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 225950 Federal Minis…    7.43    4.26 05/05/… Yes     Boreho… Well    Hand P…\n 2 225524 Federal Minis…    7.78    4.56 04/22/… Yes     Protec… Well    Hand P…\n 3 197014 Federal Minis…    7.49    4.53 04/30/… Yes     Boreho… Well    Mechan…\n 4 225173 Federal Minis…    7.93    4.73 05/02/… Yes     Boreho… Well    Hand P…\n 5 225843 Federal Minis…    7.74    4.44 05/08/… Yes     Boreho… Well    Hand P…\n 6 235508 Federal Minis…    7.15    4.64 04/27/… Yes     Protec… Well    Hand P…\n 7 197708 Federal Minis…    7.87    4.72 05/13/… Yes     Boreho… Well    Mechan…\n 8 195041 Federal Minis…    7.73    4.45 06/17/… Yes     Protec… Spring  <NA>   \n 9 225222 Federal Minis…    7.81    4.15 05/14/… Yes     Protec… Spring  Mechan…\n10 460770 GRID3             7.4     4.33 06/13/… Unknown Boreho… Well    <NA>   \n# … with 5,735 more rows, 66 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extracting-functional-water-points-in-osun",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extracting-functional-water-points-in-osun",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "7.3 Extracting functional water points in Osun",
    "text": "7.3 Extracting functional water points in Osun\n\nosun_functional <- wp_osun %>%\n  filter(`#status_clean` %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional, needs repair\",\n             \"Functional, not in use\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extracting-functional-water-points-in-osun-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extracting-functional-water-points-in-osun-1",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "7.4 Extracting functional water points in Osun",
    "text": "7.4 Extracting functional water points in Osun\n\nosun_nonfunctional <- wp_osun %>%\n  filter(`#status_clean` %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Non-Functional\",\n             \"Non-Functional, dry\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#point-in-polygon-count",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#point-in-polygon-count",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "8.1 Point-in-polygon count",
    "text": "8.1 Point-in-polygon count\nWe use the mutate() function from dplyr to add 3 new columns that count the total, functional and non-functional water points in each LGA.\n\nosunT_wp <- osunT %>% \n  mutate(`total_wp` = lengths(\n    st_intersects(osunT, wp_osun))) %>%\n  mutate(`wp_functional` = lengths(\n    st_intersects(osunT, osun_functional))) %>%\n  mutate(`wp_nonfunctional` = lengths(\n    st_intersects(osunT, osun_nonfunctional)))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#choropleth-map",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#choropleth-map",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "8.2 Choropleth map",
    "text": "8.2 Choropleth map\nTo get a general inital sensing of the absolute number of water points and where they are located, we can plot a choropleth map to visualise water points by LGA.\n\n8.2.1 Functional water points\n\np1 <- tm_shape(osunT_wp) +\n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_text(\"ADM2_EN\", size=0.3) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water point by LGAs in Osun\",\n            legend.outside = FALSE)\n\n\n\n8.2.2 Non-functional water points\n\np2 <- tm_shape(osunT_wp) +\n  tm_fill(\"wp_nonfunctional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_text(\"ADM2_EN\", size=0.3) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of nonfunctional water point by LGAs in Osun\",\n            legend.outside = FALSE)\n\n\n\n8.2.3 Comparison\nA side-by-side comparison of choropleth maps to make it easier for viewing.\n\ntmap_arrange(p1, p2, nrow = 1)\n\n\n\n\nFrom the above choropleth maps, we observe that the highest number of functional waterpoints are found in Ejigbo LGA with 256.8 to 283 water points and that of non-functional water points are found in Aiyedade LGA with 146.6 to 161 water points. Functional water points are primarily found in the Eastern regions of Osun while non-functional water points found in the South Eastern regions with the exception of Northen LGAs Ejigbo and Odo-Otin."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tmap-visualisation",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tmap-visualisation",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "8.3 tmap visualisation",
    "text": "8.3 tmap visualisation\n\ntmap_mode(\"plot\")\ntm_shape(osunT) +\n  tm_polygons() +\ntm_shape(osun_functional)+\n  tm_dots(size = 0.01,\n          col = \"blue\",\n          border.col=\"black\",\n          border.lwd=0.5) \n\n\n\n\n\ntmap_mode(\"plot\")\n\n\ntmap_mode(\"plot\")\ntm_shape(osunT) +\n  tm_polygons() +\ntm_shape(osun_nonfunctional) +\n  tm_dots(size = 0.01,\n          col = \"red\",\n          border.col=\"black\",\n          border.lwd=0.5)\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\n8.3.1 Removal of excess water point data\nWe see that a number of water point data points fall outside of the Osun state boundary. Remove them with the below code, referencing this link.\n\n8.3.1.1 Functional water points\n\nout <- osun_functional[lengths(st_intersects(osun_functional, osunT))==0,]\n\nThere are a total of 114 functional water points beyond the Osun state boundary.\n\ntmap_mode(\"plot\")\ntm_shape(osunT) +\n  tm_polygons() +\ntm_shape(out) +\n  tm_dots(size = 0.01,\n          col = \"darkblue\",\n          border.col=\"black\",\n          border.lwd=0.5)\n\n\n\n\nDrop the functional water points that are outside Osun state boundary using the subset() function.\n\nosun_functional <- subset(osun_functional, lengths(st_intersects(osun_functional, osunT))!=0,)\n\nView the functional water points within Osun, we see that now the 114 water points beyond Osun state boundary are removed.\n\ntmap_mode(\"plot\")\ntm_shape(osunT) +\n  tm_polygons() +\ntm_shape(osun_functional) +\n  tm_dots(size = 0.01,\n          col = \"blue\",\n          border.col=\"black\",\n          border.lwd=0.5)\n\n\n\n\n\n\n8.3.1.2 Non-functional water points\n\nout_non <- osun_nonfunctional[lengths(st_intersects(osun_nonfunctional, osunT))==0,]\n\nThere are a total of 131 non-functional water points beyond the Osun state boundary.\n\ntmap_mode(\"plot\")\ntm_shape(osunT) +\n  tm_polygons() +\ntm_shape(out_non) +\n  tm_dots(size = 0.01,\n          col = \"orange\",\n          border.col=\"black\",\n          border.lwd=0.5)\n\n\n\n\nDrop the non-functional water points that are outside Osun state boundary.\n\nosun_nonfunctional <- subset(osun_nonfunctional, lengths(st_intersects(osun_nonfunctional, osunT))!=0,)\n\nView the non-functional water points within Osun, we see that now the 131 water points beyond Osun state boundary are removed.\n\ntmap_mode(\"plot\")\ntm_shape(osunT) +\n  tm_polygons() +\ntm_shape(osun_nonfunctional) +\n  tm_dots(size = 0.01,\n          col = \"red\",\n          border.col=\"black\",\n          border.lwd=0.5)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#visualising-the-output-of-ppp-objects",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#visualising-the-output-of-ppp-objects",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "9.2 Visualising the output of ppp objects",
    "text": "9.2 Visualising the output of ppp objects\n\nFunctional water pointsNon-functional water points\n\n\n\nplot(functionalOsun_ppp)\n\n\n\n\n\n\n\nplot(nonfunctionalOsun_ppp)\n\n\n\n\n\n\n\nHere, we see that both the functional and non-functional water points are clustered towards the northern and central parts of Osun in seemingly similar locations."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kde-plots",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kde-plots",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "9.3 KDE plots",
    "text": "9.3 KDE plots\nWe can better visualise the data using KDE plots with the automatic bandwidth method which employs the density() function of spatstat.\nThere are 4 different kernel bandwidth estimation functions available in spatstat: bw.diggle(), bw.ppl(), bw.scott(), bw.CvL(); with the first two are recommended. bw.diggle() is appropriate for visualising one tight cluster amid random noise, while bw.ppl() is more appropriate for visualising data with predominantly tight clusters (read more here).\nBased on the ppp object outputs, we can see apparent clustering but also quite a number of data points dispersed throughout Osun, hence we will use bw.diggle() here.\n\nFunctional water pointsNon-functional water pointsComparison\n\n\n\nkde_functional_bw <- density(functionalOsun_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\")  \n\n\nplot(kde_functional_bw)\n\n\n\n\nUse the rescale()  function to convert the KDE output scale to kilometers for easier interpretation of the values.\n\nfunctionalOsun_ppp.km <- rescale(functionalOsun_ppp, 1000, \"km\")\n\n\nkde_functional_bw <- density(functionalOsun_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_functional_bw)\n\n\n\n\n\n\n\nnonfunctionalOsun_ppp.km <- rescale(nonfunctionalOsun_ppp, 1000, \"km\")\n\n\nkde_nonfunctional_bw <- density(nonfunctionalOsun_ppp.km,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \nplot(kde_nonfunctional_bw)\n\n\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(kde_functional_bw, main=\"functional\")\nplot(kde_nonfunctional_bw , main=\"non-functional\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-kde-output-into-raster",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-kde-output-into-raster",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "9.4 Converting KDE output into raster",
    "text": "9.4 Converting KDE output into raster\n\nFunctional water pointsNon-functional water points\n\n\n\ngridded_kde_functional <- as.SpatialGridDataFrame.im(kde_functional_bw)\nspplot(gridded_kde_functional)\n\n\n\n\nSaving the gridded output as a raster layer and assigning the CRS\n\nkde_functional_raster <- raster(gridded_kde_functional)\nkde_functional_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8896887, 0.9630582  (x, y)\nextent     : 178.3987, 292.2789, 329.4634, 452.7349  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -5.069271e-15, 26.78087  (min, max)\n\n\n\nprojection(kde_functional_raster) <- CRS(\"+init=EPSG:26391\")\nkde_functional_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8896887, 0.9630582  (x, y)\nextent     : 178.3987, 292.2789, 329.4634, 452.7349  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26391 \nsource     : memory\nnames      : v \nvalues     : -5.069271e-15, 26.78087  (min, max)\n\n\n\n\n\ngridded_kde_nonfunctional <- as.SpatialGridDataFrame.im(kde_nonfunctional_bw)\nspplot(gridded_kde_nonfunctional)\n\n\n\n\nSaving the gridded output as a raster layer and assigning the CRS\n\nkde_nonfunctional_raster <- raster(gridded_kde_nonfunctional)\nkde_nonfunctional_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8896887, 0.9630582  (x, y)\nextent     : 178.3987, 292.2789, 329.4634, 452.7349  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -3.727292e-15, 22.89375  (min, max)\n\n\n\nprojection(kde_nonfunctional_raster) <- CRS(\"+init=EPSG:26391\")\nkde_nonfunctional_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8896887, 0.9630582  (x, y)\nextent     : 178.3987, 292.2789, 329.4634, 452.7349  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26391 \nsource     : memory\nnames      : v \nvalues     : -3.727292e-15, 22.89375  (min, max)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#visualising-output-on-tmap",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#visualising-output-on-tmap",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "9.5 Visualising output on tmap",
    "text": "9.5 Visualising output on tmap\n\nFunctional water pointsNon-functional water points\n\n\n\ntm_shape(kde_functional_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\ntm_shape(kde_nonfunctional_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\nFrom the above KDE analysis, we can observe a high concentration of functional water points in the northwestern regions of Osun, with several water points being clustered towards the northwestern coast. For non-functional water points, there is a high concentration in central Osun and seemingly sparse dispersion observed nearer the northeastern regions."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extracting-study-areas",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extracting-study-areas",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "10.1 Extracting study areas",
    "text": "10.1 Extracting study areas\nExtract and save the selected LGAs (in Spatial* data format) using the below code:\n\no = osun_spatial[osun_spatial@data$ADM2_EN == \"Osogbo\",]\nn = osun_spatial[osun_spatial@data$ADM2_EN == \"Ife North\",]\ns = osun_spatial[osun_spatial@data$ADM2_EN == \"Ife South\",]\ne = osun_spatial[osun_spatial@data$ADM2_EN == \"Ede North\",]\n\nBelow are the selected study areas:\n\npar(mfrow=c(2,2))\nplot(o, main = \"Osogbo\")\nplot(n, main = \"Ife north\")\nplot(s, main = \"Ife south\")\nplot(e, main = \"Ede North\")\n\n\n\n\n\n10.1.1 Data preparation\nConverting the LGAs in sf format to spatial polygons\n\no_sp = as(o, \"SpatialPolygons\")\nn_sp = as(n, \"SpatialPolygons\")\ns_sp = as(s, \"SpatialPolygons\")\ne_sp = as(e, \"SpatialPolygons\")\n\nCreating owin objects\n\no_owin = as(o_sp, \"owin\")\nn_owin = as(n_sp, \"owin\")\ns_owin = as(s_sp, \"owin\")\ne_owin = as(e_sp, \"owin\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#functional-water-points-6",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#functional-water-points-6",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "10.2 Functional water points",
    "text": "10.2 Functional water points\n\n10.2.1 Extracting the relevant data for each LGA\n\no_ppp = functional_ppp[o_owin]\nn_ppp = functional_ppp[n_owin]\ns_ppp = functional_ppp[s_owin]\ne_ppp = functional_ppp[e_owin]\n\n\n\n10.2.2 Rescaling the data to kilometers\n\no_ppp.km = rescale(o_ppp, 1000, \"km\")\nn_ppp.km = rescale(n_ppp, 1000, \"km\")\ns_ppp.km = rescale(s_ppp, 1000, \"km\")\ne_ppp.km = rescale(e_ppp, 1000, \"km\")\n\n\n\n10.2.3 Visualising the LGA ppp objects\n\npar(mfrow=c(2,2))\nplot(o_ppp.km, main=\"Osogbo\")\nplot(n_ppp.km, main=\"Ife north\")\nplot(s_ppp.km, main=\"Ife south\")\nplot(e_ppp.km, main=\"Ede north\")\n\n\n\n\n\n\n10.2.4 Comparing LGA KDE outputs\n\npar(mfrow=c(2,2))\nplot(density(o_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Osogbo\")\nplot(density(n_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Ife north\")\nplot(density(s_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Ife south\")\nplot(density(e_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Ede north\")\n\n\n\n\nWe can observe that there are a high concentration of functional water points in the North of Osogbo with a range of up to 30. In Ede North, tight clusters are observed with a range of up to 200. In both Ife South and Ife North, a smaller range of KDE plots is observed with only up to a range of 20."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#non-functional-water-points-6",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#non-functional-water-points-6",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "10.3 Non-functional water points",
    "text": "10.3 Non-functional water points\n\n10.3.1 Extracting the relevant data for each LGA\n\no_non_ppp = nonfunctional_ppp[o_owin]\nn_non_ppp = nonfunctional_ppp[n_owin]\ns_non_ppp = nonfunctional_ppp[s_owin]\ne_non_ppp = nonfunctional_ppp[e_owin]\n\n\n\n10.3.2 Rescaling the data to kilometers\n\no_non_ppp.km = rescale(o_non_ppp, 1000, \"km\")\nn_non_ppp.km = rescale(n_non_ppp, 1000, \"km\")\ns_non_ppp.km = rescale(s_non_ppp, 1000, \"km\")\ne_non_ppp.km = rescale(e_non_ppp, 1000, \"km\")\n\n\n\n10.3.3 Visualising the LGA ppp objects\n\npar(mfrow=c(2,2))\nplot(o_non_ppp.km, main=\"Osogbo\")\nplot(n_non_ppp.km, main=\"Ife North\")\nplot(s_non_ppp.km, main=\"Ife South\")\nplot(e_non_ppp.km, main=\"Ede North\")\n\n\n\n\n\n\n10.3.4 Comparing LGA KDE outputs\n\npar(mfrow=c(2,2))\nplot(density(o_non_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Osogbo\")\nplot(density(n_non_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Ife north\")\nplot(density(s_non_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Ife south\")\nplot(density(e_non_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Ede north\")\n\n\n\n\nFor non-functional water points, we can observe that there are higher concentrations of non-functional water points in Osogbo and Ede North - with a range of 30 and 15 respectively - compared to Ife North and Ife South - with a range of 12 and 6 respectively. Overall, we see that there is a lower concentration of non-functional compared to functional water points in all 4 LGAs."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#functional-water-points-7",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#functional-water-points-7",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "11.1 Functional water points",
    "text": "11.1 Functional water points\n\nH0: The distribution of functional water points in selected LGAs are randomly distributed.\nH1: The distribution of functional water points in selected LGAs are not randomly distributed.\nConfidence level: 95%\nSignificance level: 0.05\n\nThe null hypothesis is rejected if the p value is less than 0.05 at 95% confidence level. If the p value is greater than 0.05, there is insufficient evidence to reject the null hypothesis.\n\nOsogboIfe SouthIfe NorthEde North\n\n\n\n11.1.0.1 L function\n\nL_o_functional = Lest(o_ppp, correction = \"Ripley\")\nplot(L_o_functional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n11.1.0.2 Complete Spatial Randomness test\n\nL_o_functional.csr <- envelope(o_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(L_o_functional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\nThe L function is more than 0 and well above the envelope, we can conclude that there are statistically significant signs of clustering pattern in functional water points in Osogbo\nHence, we reject the null hypothesis that functional water points in Osogbo are randomly distributed.\n\n\n\n\n\n11.1.0.3 L function\n\nL_s_functional = Lest(s_ppp, correction = \"Ripley\")\nplot(L_s_functional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n11.1.0.4 Complete Spatial Randomness\n\nL_s_functional.csr <- envelope(s_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(L_s_functional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\nThe L function is more than 0 and well above the envelope, we can conclude that there are statistically significant signs of clustering pattern in functional water points in Ife South\nHence, we reject the null hypothesis that functional water points in Ife South are randomly distributed.\n\n\n\n\n\n11.1.0.5 L function\n\nL_n_functional = Lest(n_ppp, correction = \"Ripley\")\nplot(L_n_functional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n11.1.0.6 Complete Spatial Randomness\n\nL_n_functional.csr <- envelope(n_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(L_n_functional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\nThe L function is more than 0 and well above the envelope, we can conclude that there are statistically significant signs of clustering pattern in functional water points in Ife North\nHence, we reject the null hypothesis that functional water points in Ife North are randomly distributed.\n\n\n\n\n\n11.1.0.7 L function\n\nL_e_functional = Lest(e_ppp, correction = \"Ripley\")\nplot(L_e_functional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n11.1.0.8 Complete Spatial Randomness\n\nL_e_functional.csr <- envelope(e_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(L_e_functional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\nThe L function is more than 0 and well above the envelope, we can conclude that there are statistically significant signs of clustering pattern in functional water points in Ede North.\nHence, we reject the null hypothesis that functional water points in Ede North are randomly distributed."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#non-functional-water-points-7",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#non-functional-water-points-7",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "11.2 Non-functional water points",
    "text": "11.2 Non-functional water points\n\nH0: The distribution of non-functional water points in selected LGAs are randomly distributed.\nH1: The distribution of non-functional water points in selected LGAs are not randomly distributed.\nConfidence level: 95%\nSignificance level: 0.05\n\n\nOsogboIfe SouthIfe NorthEde North\n\n\n\n11.2.0.1 L function\n\nL_o_nonfunctional = Lest(o_non_ppp, correction = \"Ripley\")\nplot(L_o_nonfunctional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n11.2.0.2 Complete Spatial Randomness test\n\nL_o_nonfunctional.csr <- envelope(o_non_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(L_o_nonfunctional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\nFor d greater than 125m (estimated), the L function is more than 0 and well above the envelope, we can conclude that there are statistically significant signs of clustering pattern in non-functional water points in Osogbo. Hence, we reject the null hypothesis that nonfunctional water points in Osogbo are randomly distributed.\nFor 0m to 31.25m (estimated), the L function lies with in the lower envelope at 95% confidence level and below 0, hence we can conclude spatial dispersion is statistically not significant and we reject the null hypothesis.\nFor 31.25m to 62.5m (estimated), the L function lies within the upper envelope and is greater than 0, hence we have insufficient evidence to reject the null hypothesis. Therefore, functional water points at this distance are randomly distributed.\n\n\n\n\n\n11.2.0.3 L function\n\nL_s_nonfunctional = Lest(s_non_ppp, correction = \"Ripley\")\nplot(L_s_nonfunctional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n11.2.0.4 Complete Spatial Randomness\n\nL_s_nonfunctional.csr <- envelope(s_non_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(L_s_nonfunctional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\nThe L function is more than 0 and well above the envelope, we can conclude that there are statistically significant signs of clustering pattern in non-functional water points in Ife South.\nHence, we reject the null hypothesis that non-functional water points in Ife South are randomly distributed.\n\n\n\n\n\n11.2.0.5 L function\n\nL_n_nonfunctional = Lest(n_non_ppp, correction = \"Ripley\")\nplot(L_n_nonfunctional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n11.2.0.6 Complete Spatial Randomness\n\nL_n_nonfunctional.csr <- envelope(n_non_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(L_n_nonfunctional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\nThe L function is more than 0 and well above the envelope, we can conclude that there are statistically significant signs of clustering pattern in non-functional water points in Ife North.\nHence, we reject the null hypothesis that non-functional water points in Ife North are randomly distributed.\n\n\n\n\n\n11.2.0.7 L function\n\nL_e_nonfunctional = Lest(e_non_ppp, correction = \"Ripley\")\nplot(L_e_nonfunctional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n11.2.0.8 Complete Spatial Randomness\n\nL_e_nonfunctional.csr <- envelope(e_non_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(L_e_nonfunctional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\nThe L function is more than 0 and well above the envelope, we can conclude that there are statistically significant signs of clustering pattern in non-functional water points in Ede North.\nHence, we reject the null hypothesis that non-functional water points in Ede North are randomly distributed."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preparing-nearest-neighbour-list",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preparing-nearest-neighbour-list",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "12.1 Preparing nearest neighbour list",
    "text": "12.1 Preparing nearest neighbour list\nrbind the filtered functional and non-functional data points within Osun boundary.\n\nosun_final_wp <- rbind(osun_functional, osun_nonfunctional)\n\nThe st_knn() is used to obtain the k nearest neighbour for water point data.\n\nnb <- include_self(st_knn(st_geometry(osun_final_wp), 5))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#computing-kernel-weights",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#computing-kernel-weights",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "12.2 Computing kernel weights",
    "text": "12.2 Computing kernel weights\n\nwt <- st_kernel_weights(nb, osun_final_wp , \"gaussian\", adaptive=TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preparing-vector-list",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preparing-vector-list",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "12.3 Preparing vector list",
    "text": "12.3 Preparing vector list\nUsing the functional water point data, replace the values in column #status_clean with “Functional” to standardise column values.\n\nosun_functional$`#status_clean`[osun_functional$`#status_clean` != \"Functional\"] <- \"Functional\"\n\nSave the column into a variable called x\n\nx <- osun_functional$`#status_clean`\n\nDo the same for non-functional water point data:\n\nosun_nonfunctional$`#status_clean`[osun_nonfunctional$`#status_clean` != \"Non-Functional\"] <- \"Non-Functional\"\n\n\ny <- osun_nonfunctional$`#status_clean`"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#obtaining-lclq",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#obtaining-lclq",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "12.4 Obtaining LCLQ",
    "text": "12.4 Obtaining LCLQ\n\nH0: Spatial distribution of functional and non-functional water points are independent of each other.\nH1: Spatial distribution of functional and non-functional water points are not independent of each other.\nConfidence level: 95%\n\n\nLCLQ_osun <- local_colocation(x, y, nb ,wt ,39)\n\n\nLCLQ_wp <- cbind(osun_final_wp, LCLQ_osun)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#visualising-lclq",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#visualising-lclq",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "12.5 Visualising LCLQ",
    "text": "12.5 Visualising LCLQ\n\ntmap_mode(\"view\")\ntm_shape(osunT) +\n  tm_polygons() +\ntm_shape(LCLQ_wp) +\n  tm_dots(col = \"p_sim_Non.Functional\",\n          size = 0.01,\n          border.col=\"black\",\n          border.lwd=0.5  )\n\n\n\n\n\ntm_view(set.zoom.limits = c(5,20))\n\n$tm_layout\n$tm_layout$set.zoom.limits\n[1]  5 20\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\"\n\n\n\ntmap_mode(\"plot\")\n\nFrom the above map, we can conclude that for water points with simulated p values less than 0.05, reject the null hypothesis that functional and non-functional water points are independent of each other. While for those with values greater than 0.05, there is insufficient evidence to reject the null hypothesis."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extracting-non-functional-water-points-in-osun",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extracting-non-functional-water-points-in-osun",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "7.4 Extracting non-functional water points in Osun",
    "text": "7.4 Extracting non-functional water points in Osun\n\nosun_nonfunctional <- wp_osun %>%\n  filter(`#status_clean` %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Non-Functional\",\n             \"Non-Functional, dry\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#geospatial-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#geospatial-data",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "4.2 Geospatial data",
    "text": "4.2 Geospatial data\nThe state boundary data of Nigeria is obtained from  Humanitarian Data Exchange portal. Download the Nigeria - Subnational Administrative Boundaries zip file titled nga_adm_osgof_20190417.zip"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "9.1 Data preparation",
    "text": "9.1 Data preparation\n\n9.1.1 sp Spatial* class\nUsing the as_Spatial() function from sf package, we convert the spatial data from simple feature data frame to sp’s Spatial* class.\n\nfunctional_spatial <- as_Spatial(osun_functional)\n\nnonfunctional_spatial <- as_Spatial(osun_nonfunctional)\n\nosun_spatial <-as_Spatial(osunT)\n\nWe see that the converted Spatial* objects are of class SpatialPointsDataFrame or SpatialPolygonsDataFrame.\n\nfunctional_spatial\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2623 \nextent      : 184202.3, 291989.5, 341443.2, 449013.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=4.5 +k=0.99975 +x_0=230738.26 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 74\nnames       : row_id,                                     X.source, X.lat_deg, X.lon_deg,          X.report_date, X.status_id,    X.water_source_clean, X.water_source_category,      X.water_tech_clean, X.water_tech_category, X.facility_type, X.clean_country_name, X.clean_adm1, X.clean_adm2, X.clean_adm3, ... \nmin values  : 171841, Federal Ministry of Water Resources, Nigeria, 7.0890301, 4.0771867, 01/01/2010 12:00:00 AM,     Unknown,                Borehole,                  Spring,               Hand Pump,             Hand Pump,        Improved,              Nigeria,         Osun,     Aiyedade,           NA, ... \nmax values  : 683844,                                        GRID3, 8.0618983, 5.0550034, 08/29/2018 12:00:00 AM,         Yes, Undefined Hand Dug Well,                    Well, Mechanized Pump - Solar,       Mechanized Pump,        Improved,              Nigeria,         Osun,       Osogbo,           NA, ... \n\n\n\nnonfunctional_spatial\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2129 \nextent      : 184218.5, 291855.5, 338261.8, 448933.5  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=4.5 +k=0.99975 +x_0=230738.26 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 74\nnames       : row_id,                                     X.source, X.lat_deg, X.lon_deg,          X.report_date, X.status_id,    X.water_source_clean, X.water_source_category,      X.water_tech_clean, X.water_tech_category, X.facility_type, X.clean_country_name, X.clean_adm1, X.clean_adm2, X.clean_adm3, ... \nmin values  : 183489, Federal Ministry of Water Resources, Nigeria,  7.060309, 4.0773333, 04/22/2015 12:00:00 AM,          No,                Borehole,                  Spring,               Hand Pump,             Hand Pump,        Improved,              Nigeria,         Osun,     Aiyedade,           NA, ... \nmax values  : 475147,                                        GRID3, 8.0611733, 5.0537867, 08/29/2018 12:00:00 AM,     Unknown, Undefined Hand Dug Well,                    Well, Mechanized Pump - Solar,       Mechanized Pump,        Improved,              Nigeria,         Osun,       Osogbo,           NA, ... \n\n\n\nosun_spatial\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 30 \nextent      : 178398.7, 292278.9, 329463.4, 452734.9  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=4.5 +k=0.99975 +x_0=230738.26 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       :  ADM2_EN, ADM2_PCODE, ADM1_EN, ADM1_PCODE \nmin values  : Aiyedade,   NG030001,    Osun,      NG030 \nmax values  :   Osogbo,   NG030030,    Osun,      NG030 \n\n\n\n\n9.1.2 Generic sp object\nSince spatstat requires data to be in ppp object form, and only Spatial objects can be converted into ppp form, we convert the data into Spatial objects first.\n\nfunctional_sp <- as(functional_spatial, \"SpatialPoints\")\nnonfunctional_sp <- as(nonfunctional_spatial, \"SpatialPoints\")\nosun_sp <- as(osun_spatial, \"SpatialPolygons\")\n\n\n\n9.1.3 spatstat’s ppp object\nWe use spatstat to convert the spatial objects into ppp format.\n\nfunctional_ppp <- as(functional_sp, \"ppp\")\nnonfunctional_ppp <- as(nonfunctional_sp, \"ppp\")\n\n\n\n9.1.4 Check for duplicates\nEnsure that there are no duplicates in the data before visualising it.\n\nany(duplicated(functional_ppp))\n\n[1] FALSE\n\n\n\nany(duplicated(nonfunctional_ppp))\n\n[1] FALSE\n\n\nThere are no duplicates in the data.\n\n\n9.1.5 Creating owin objects\nOwin objects are used to define and confine a polygonal study area - in this analysis, we will be confining the study area to Osun state.\n\nosun_owin <- as(osun_sp, \"owin\")\nplot(osun_owin)\n\n\n\n\nWe extract the relevant functional and non-functional water points within Osun state.\n\nfunctionalOsun_ppp= functional_ppp[osun_owin]\nnonfunctionalOsun_ppp= nonfunctional_ppp[osun_owin]"
  }
]